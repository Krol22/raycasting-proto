{"version":3,"sources":["src/index.js","src/map.js"],"names":["loadAsset","ctx","document","querySelector","getContext","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","cameraX","rayDirX","rayDirY","image","posX","posY","dirX","dirY","planeX","planeY","h","update","x","mapX","Math","floor","mapY","deltaDistX","sqrt","deltaDistY","perpWallDist","stepX","stepY","sideDistX","sideDistY","side","hitWalls","map","push","value","reverse","forEach","color","wallX","lineHeight","abs","drawStart","drawEnd","fillStyle","fillRect","textureX","drawImage","val2","input","a","b","c","d","mapValue","loop","window","requestAnimationFrame","rotSpeed","addEventListener","e","key","oldDirX","cos","sin","oldPlaneX","src","Promise","resolve","asset","Image","onload","then"],"mappings":";;AA6QAA,IAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,mBAAAA,eAAAA,cAAAA,EAAAA,mBAAAA,SAAAA,QAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,eAAAA,cAAAA,IAAAA,GAAAA,EAAAA,OAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,OAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,iBAAAA,EAAAA,OAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uBAAAA,EAAAA,KAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,EAAAA,EAAAA,QAAAA,SAAAA,GAAAA,OAAAA,EAAAA,GAAAA,GAAAA,IAAAA,GAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,OAAAA,GAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,EAAAA,EAAAA,QAAAA,MAAAA,OAAAA,EAAAA,GAAAA,QAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,EAAAA,QAAAA,KAAAA,EAAAA,iBAAAA,EAAAA,EAAAA,OAAAA,SAAAA,GAAAA,KAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,QAAAA,IAAAA,EAAAA,QAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SAAAA,SAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,SAAAA,EAAAA,GAAAA,EAAAA,QAAAA,GAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,IAAAA,EAAAA,EAAAA,IAAAA,MAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,OAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,WAAAA,oBAAAA,QAAAA,YAAAA,EAAAA,WAAAA,oBAAAA,OAAAA,OAAAA,QAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,KAAAA,EAAAA,WAAAA,OAAAA,IAAAA,GAAAA,cAAAA,EAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GC7QO,aAAA,OAAA,eAAA,EAAA,aAAA,CAAA,OAAA,IAAA,EAAA,SAAA,EAAA,EAAA,IAAY,CACjqPjDA,IAAAA,KAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAA,aA7QA,IAAA,EAAA,EAAA,SASMC,EAAMC,SAASC,cAAc,gBAAgBC,WAAW,MAC9DH,EAAII,6BAAAA,EACJJ,EAAIK,0BAAAA,EAeAC,IAAAA,EAASC,EAASC,EAElBC,EAfAC,EAAO,GACPC,EAAO,GACPC,GAAQ,EACRC,EAAO,EAIPC,EAAS,EACTC,EAAS,IAUTC,EAAI,IAEFC,EAAS,WAEJC,IAAAA,IAAAA,EAAAA,SAAAA,GAIPX,EAAUK,EAAOE,GAHjBR,EAAU,EAAIY,EANV,IAMkB,GAItBV,EAAUK,EAAOE,EAAST,EAKpBa,IAAAA,EAAOC,KAAKC,MAAMX,GAClBY,EAAOF,KAAKC,MAAMV,GAKpBY,EAAaH,KAAKI,KAAK,EAAKhB,EAAUA,GAAYD,EAAUA,IAC5DkB,EAAaL,KAAKI,KAAK,EAAKjB,EAAUA,GAAYC,EAAUA,IAC5DkB,OAAAA,EAGAC,OAAAA,EACAC,OAAAA,EAGAC,OAAAA,EAAWC,OAAAA,EAGXC,OAAAA,EAIAxB,EAAU,GACZoB,GAAS,EACTE,GAAanB,EAAOS,GAAQI,IAE5BI,EAAQ,EACRE,GAAaV,EAAO,EAAIT,GAAQa,GAE9Bf,EAAU,GACZoB,GAAS,EACTE,GAAanB,EAAOW,GAAQG,IAE5BG,EAAQ,EACRE,GAAaR,EAAO,EAAIX,GAAQc,GAG5BO,IAAAA,IAAAA,EAAW,GAGXH,EAAYC,GACdD,GAAaN,EACbJ,GAAQQ,EACRR,EAAOC,KAAKC,MAAMF,GAClBY,EAAO,IAEPD,GAAaL,EACbH,GAAQM,EACRN,EAAOF,KAAKC,MAAMC,GAClBS,EAAO,KAGLE,EAAId,IAAAA,GAAMG,GAAQ,IACpBU,EAASE,KAAK,CACZf,KAAAA,EACAG,KAAAA,EACAS,KAAAA,EACAI,MAAOF,EAAId,IAAAA,GAAMG,KAEK,IAApBW,EAAId,IAAAA,GAAMG,OASlBU,EAASI,UAAUC,QAAQ,SAA+B,GAA7BlB,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,KAAMS,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAE3CT,EADW,IAATK,GACcZ,EAAOT,GAAQ,EAAIiB,GAAS,GAAKpB,GAEjCe,EAAOX,GAAQ,EAAIiB,GAAS,GAAKpB,EA4B/C8B,IAAAA,EAmCAC,EAvDAC,EAAapB,KAAKC,MAAMD,KAAKqB,IAAIzB,EAAIU,IAGrCgB,EAAY1B,IAAQwB,EAAa,EACjCG,EAAUD,EAAYF,EAGZ,OAAA,IAAVL,IAEFQ,GADAD,EAAY1B,IAAQwB,EAAa,GACXA,EAAaL,GAGvB,IAAVA,IAEFQ,GADAD,EAAY1B,IAAQwB,EAAa,GACXA,EAAaL,EAAQ,KAOtCF,EAAId,IAAAA,GAAMG,IACV,KAAA,EACHgB,EAAO,MACM,IAATP,IACFO,EAAQ,UAEV,MAEG,KAAA,EACHA,EAAO,QACM,IAATP,IACFO,EAAQ,eAEV,MAEG,KAAA,EACHA,EAAO,OACM,IAATP,IACFO,EAAQ,WAEV,MAEG,KAAA,EACHA,EAAO,QACM,IAATP,IACFO,EAAQ,cAMdtC,EAAI4C,UAAYN,EAChBtC,EAAI6C,SAAS3B,EAAGwB,EAAW,EAAGC,EAAUD,GAItCH,EADW,IAATR,EACMpB,EAAOe,EAAelB,EAEtBE,EAAOgB,EAAenB,EAGhCgC,GAASnB,KAAKC,MAAMkB,GAGhBO,IAAAA,EAAW1B,KAAKC,MADF,GACQkB,GAEtBJ,IAAAA,EACFnC,EAAI+C,UAAUtC,EAAOqC,EAAU,EAAG,EAJlB,GAIkC5B,EAAGyB,EAAS,EAAgB,IAAbH,EAAmBL,GACjE,IAAVA,EACTnC,EAAI+C,UAAUtC,EAAOqC,EAAU,EAAG,EANlB,GAMkC5B,EAAGyB,EAAS,EAAGH,EAAaL,GAE9EnC,EAAI+C,UAAUtC,EAAOqC,EAAU,EAAG,EARlB,GAQkC5B,EAAGyB,EAAS,EAAGH,GAG7DQ,IAAAA,EAnMK,SAACC,EAAOC,EAAGC,EAAGC,EAAGC,GACzBD,OAAAA,GAAMC,EAAID,IAAMD,EAAID,IAAOD,EAAQC,GAkMzBI,CAAS5B,EAAc,EAAG,GAAI,EAAG,IAC9C1B,EAAI4C,UAA6BI,iBAAAA,OAAAA,EAAjC,KACAhD,EAAI6C,SAAS3B,EAAGwB,EAAW,EAAGC,EAAUD,MAvKnCxB,EAAI,EAAGA,EALV,IAKiBA,IAAdA,EAAAA,IA+KLqC,EAAO,SAAPA,IACJvD,EAAI4C,UAAY,QAChB5C,EAAI6C,SAAS,EAAG,EAAG,IAAK,KACxB5B,IACAuC,OAAOC,sBAAsBF,IAGzBG,EAAW,GAEjBF,OAAOG,iBAAiB,UAAW,SAAAC,GACnB,GAAA,MAAVA,EAAEC,MACJlD,GAAe,GAAPE,EACRH,GAAe,GAAPE,GAEI,MAAVgD,EAAEC,MACJlD,GAAe,GAAPE,EACRH,GAAe,GAAPE,GAGI,MAAVgD,EAAEC,IAAa,CACXC,IAAAA,EAAUlD,EAChBA,EAAOA,EAAOQ,KAAK2C,KAAKL,GAAY7C,EAAOO,KAAK4C,KAAKN,GACrD7C,EAAOiD,EAAU1C,KAAK4C,KAAKN,GAAY7C,EAAOO,KAAK2C,KAAKL,GAElDO,IAAAA,EAAYnD,EAClBA,EAASA,EAASM,KAAK2C,KAAKL,GAAY3C,EAASK,KAAK4C,KAAKN,GAC3D3C,EAASkD,EAAY7C,KAAK4C,KAAKN,GAAY3C,EAASK,KAAK2C,KAAKL,GAGlD,GAAA,MAAVE,EAAEC,IAAa,CACXC,IAAAA,EAAUlD,EAChBA,EAAOA,EAAOQ,KAAK2C,IAAIL,GAAY7C,EAAOO,KAAK4C,IAAIN,GACnD7C,EAAOiD,EAAU1C,KAAK4C,IAAIN,GAAY7C,EAAOO,KAAK2C,IAAIL,GAEhDO,IAAAA,EAAYnD,EAClBA,EAASA,EAASM,KAAK2C,IAAIL,GAAY3C,EAASK,KAAK4C,IAAIN,GACzD3C,EAASkD,EAAY7C,KAAK4C,IAAIN,GAAY3C,EAASK,KAAK2C,IAAIL,GAI1DE,MAAAA,EAAEC,KACM,GAGE,MAAVD,EAAEC,KACM,MAII,SAACK,GACV,OAAA,IAAIC,QAAQ,SAAAC,GACXC,IAAAA,EAAQ,IAAIC,MAClBD,EAAMH,IAAMA,EACZG,EAAME,OAAS,WACbH,EAAQC,OAKdtE,CAAU,YAAYyE,KAAK,SAACH,GAC1B5D,EAAQ4D,EACRb,OAAOC,sBAAsBF,MAF/BxD,CAAAA,QAAAA,UAAAA,GAAAA,CAAAA","file":"src.06b05bcf.a151a02d.js","sourceRoot":"..","sourcesContent":["import { map } from './map';\n\n// const MAP_WIDTH = 24;\n// const MAP_HEIGHT = 24;\n//\nconst mapValue = (input, a, b, c, d) => {\n  return c + ((d - c) / (b - a)) * (input - a);\n};\n\nconst ctx = document.querySelector('#game-canvas').getContext('2d');\nctx.webkitImageSmoothingEnabled = false;\nctx.mozImageSmoothingEnabled = false;\n\nlet posX = 22;\nlet posY = 10;\nlet dirX = -1;\nlet dirY = 0;\n\nlet offset = 0;\n\nlet planeX = 0;\nlet planeY = 0.66;\n\n// let time = 0;\n// let oldTime = 0;\n//\nlet cameraX, rayDirX, rayDirY;\n\nlet image;\n\nlet w = 800;\nlet h = 400;\n\nconst update = () => {\n  // cast 'RAYS';\n  for (let x = 0; x < w; x++) {\n    cameraX = 2 * x / w - 1; \n\n    // get ray direction\n    rayDirX = dirX + planeX * cameraX;\n    rayDirY = dirY + planeY * cameraX;\n\n    // -------- DDA ---------\n\n    // get player coords;\n    const mapX = Math.floor(posX);\n    const mapY = Math.floor(posY);\n\n    // length of ray from one x or y-side to next x or y-side\n    // let deltaDistX = Math.abs(1 / rayDirX);\n    // let deltaDistY = Math.abs(1 / rayDirY);\n    let deltaDistX = Math.sqrt(1 + (rayDirY * rayDirY) / (rayDirX * rayDirX));\n    let deltaDistY = Math.sqrt(1 + (rayDirX * rayDirX) / (rayDirY * rayDirY));\n    let perpWallDist;\n\n    // direction of step\n    let stepX;\n    let stepY;\n\n    // length of ray from current position to next x or y-side\n    let sideDistX, sideDistY;\n\n    let hit = false;\n    let side; // 0 if x-axis side was hit 1 when y-axis side was hit\n\n    // calculate step & initial sideDist,\n\n    if (rayDirX < 0) {\n      stepX = -1;\n      sideDistX = (posX - mapX) * deltaDistX;\n    } else {\n      stepX = 1;\n      sideDistX = (mapX + 1 - posX) * deltaDistX;\n    }\n    if (rayDirY < 0) {\n      stepY = -1;\n      sideDistY = (posY - mapY) * deltaDistY;\n    } else {\n      stepY = 1;\n      sideDistY = (mapY + 1 - posY) * deltaDistY;\n    } \n\n    const hitWalls = [];\n    // Actual DDA\n    while (true) {\n      if (sideDistX < sideDistY) {\n        sideDistX += deltaDistX;\n        mapX += stepX;\n        mapX = Math.floor(mapX);\n        side = 0;\n      } else {\n        sideDistY += deltaDistY;\n        mapY += stepY;\n        mapY = Math.floor(mapY);\n        side = 1;\n      }\n\n      if (map[mapX][mapY] > 0) {\n        hitWalls.push({\n          mapX,\n          mapY,\n          side,\n          value: map[mapX][mapY],\n        });\n        if (map[mapX][mapY] === 1) {\n          break;\n        }\n      }\n    }\n\n    // ------- DDA DONE -------\n\n    // Calculate distance projected on camera\n    hitWalls.reverse().forEach(({mapX, mapY, side, value}) => {\n      if (side === 0) {\n        perpWallDist = (mapX - posX + (1 - stepX) / 2) / rayDirX;\n      } else {\n        perpWallDist = (mapY - posY + (1 - stepY) / 2) / rayDirY;\n      }\n\n      // if (value === 3) {\n        // perpWallDist = perpWallDist * 4;\n      // }\n\n      // Calculate col height;\n      let lineHeight = Math.floor(Math.abs(h / perpWallDist));\n\n      // calculate lowest and highest pixel;\n      let drawStart = h / 2 + lineHeight / 2 ;\n      let drawEnd = drawStart - lineHeight;\n      // if (drawStart < 0) drawStart = 0;\n\n      if (value === 3) {\n        drawStart = h / 2 + lineHeight / 2;\n        drawEnd = drawStart - lineHeight / value; \n      }\n\n      if (value === 2) {\n        drawStart = h / 2 + lineHeight / 2;\n        drawEnd = drawStart - lineHeight * value * 1.2; \n      }\n      // let drawEnd = drawStart - 5 * 10 + 20;\n      // if (value === 3) {\n      // }\n\n      let color;\n      switch(map[mapX][mapY]) {\n        case(1): {\n          color= 'red';\n          if (side === 1) {\n            color = 'salmon';\n          }\n          break;\n        }\n        case(2): {\n          color= 'green';\n          if (side === 1) {\n            color = 'springgreen';\n          }\n          break;\n        }\n        case(3): {\n          color= 'blue';\n          if (side === 1) {\n            color = 'skyblue';\n          }\n          break;\n        }\n        case(4): {\n          color= 'white';\n          if (side === 1) {\n            color = 'whitesmoke';\n          }\n          break;\n        }\n      }\n\n      ctx.fillStyle = color;\n      ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);\n\n      let wallX\n      if (side === 0) {\n        wallX = posY + perpWallDist * rayDirY;\n      } else {\n        wallX = posX + perpWallDist * rayDirX;\n      }\n\n      wallX -= Math.floor(wallX);\n\n      let textureSize = 15;\n      let textureX = Math.floor(wallX * textureSize);\n\n      if (value === 2) {\n        ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight * 1.2 * value);\n      } else if (value === 3) {\n        ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight / value);\n      } else {\n        ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight);\n      }\n\n      const val2 = mapValue(perpWallDist, 0, 15, 0, 0.5);\n      ctx.fillStyle = `rgba(0, 0, 0, ${val2})`;\n      ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);\n    });\n    // WALL TEXTURES\n\n    // FOG\n  }\n};\n\nconst loop = () => {\n  ctx.fillStyle = 'black';\n  ctx.fillRect(0, 0, 800, 400);\n  update(); \n  window.requestAnimationFrame(loop);\n};\n\nconst rotSpeed = 0.1;\n\nwindow.addEventListener('keydown', e => {\n  if (e.key === 'w') {\n    posY += dirY * 0.2;\n    posX += dirX * 0.2;\n  }\n  if (e.key === 's') {\n    posY -= dirY * 0.2;\n    posX -= dirX * 0.2;\n  }\n\n  if (e.key === 'd') {\n    const oldDirX = dirX;\n    dirX = dirX * Math.cos(-rotSpeed) - dirY * Math.sin(-rotSpeed);\n    dirY = oldDirX * Math.sin(-rotSpeed) + dirY * Math.cos(-rotSpeed);\n\n    const oldPlaneX = planeX;\n    planeX = planeX * Math.cos(-rotSpeed) - planeY * Math.sin(-rotSpeed);\n    planeY = oldPlaneX * Math.sin(-rotSpeed) + planeY * Math.cos(-rotSpeed);\n  }\n  \n  if (e.key === 'a') {\n    const oldDirX = dirX;\n    dirX = dirX * Math.cos(rotSpeed) - dirY * Math.sin(rotSpeed);\n    dirY = oldDirX * Math.sin(rotSpeed) + dirY * Math.cos(rotSpeed);\n\n    const oldPlaneX = planeX;\n    planeX = planeX * Math.cos(rotSpeed) - planeY * Math.sin(rotSpeed);\n    planeY = oldPlaneX * Math.sin(rotSpeed) + planeY * Math.cos(rotSpeed);\n\n  }\n\n  if (e.key === 'q') {\n    offset += 10;\n  } \n\n  if (e.key === 'z') {\n    offset -= 10;\n  }\n});\n\nconst loadAsset = (src) => {\n  return new Promise(resolve => {\n    const asset = new Image();\n    asset.src = src;\n    asset.onload = () => {\n      resolve(asset);\n    }\n  });\n}\n\nloadAsset('Wall.png').then((asset) => {\n  image = asset\n  window.requestAnimationFrame(loop);\n\n})\n","export const map = [\n  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,3,0,0,0,3,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,0,0,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n];\n"]}