{"version":3,"sources":["map.js","index.js"],"names":["map","mapValue","input","a","b","c","d","ctx","document","querySelector","getContext","floorCtx","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","imageSmoothingEnabled","rayCastingImageData","textureImageData","floorImageData","celingImageData","cameraX","rayDirX","rayDirY","image","posX","posY","dirX","dirY","offset","planeX","planeY","getImageData","canvas","createElement","width","height","drawImage","addPixelToImageData","sourceData","sourceIndex","dest","destIndex","alpha","data","w","h","update","x","mapX","Math","floor","mapY","deltaDistX","sqrt","deltaDistY","perpWallDist","stepX","stepY","sideDistX","sideDistY","side","hitWalls","push","value","reverse","forEach","lineHeight","color","wallX","abs","drawStart","drawEnd","textureSize","floorXWall","floorYWall","textureX","fillStyle","fillRect","y","currentDist","weight","currentFloorX","currentFloorY","floorTexX","destCeilIndex","val2","loop","clearRect","save","ImageData","restore","putImageData","window","requestAnimationFrame","rotSpeed","addEventListener","e","key","oldDirX","cos","sin","oldPlaneX","loadAsset","src","Promise","resolve","asset","Image","onload","then"],"mappings":"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","file":"src.1c791322.js","sourceRoot":"../src","sourcesContent":["export const map = [\n  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,3,0,0,0,3,0,0,0,1],\n  [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,0,0,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n];\n","import { map } from './map';\n\n// const MAP_WIDTH = 24;\n// const MAP_HEIGHT = 24;\n//\nconst mapValue = (input, a, b, c, d) => {\n  return c + ((d - c) / (b - a)) * (input - a);\n};\n\nconst ctx = document.querySelector('#game-canvas').getContext('2d');\nconst floorCtx = document.querySelector('#floor-canvas').getContext('2d');\nctx.webkitImageSmoothingEnabled = false;\nctx.mozImageSmoothingEnabled = false;\nctx.imageSmoothingEnabled = false;\n\nlet posX = 22;\nlet posY = 10;\nlet dirX = -1;\nlet dirY = 0;\n\nlet offset = 0;\n\nlet planeX = 0;\nlet planeY = 0.66;\n\n// let time = 0;\n// let oldTime = 0;\n//\n\nlet rayCastingImageData;\n\nconst getImageData = image => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(image, 0, 0);\n  return ctx.getImageData(0, 0, image.width, image.height);\n};\n\nlet textureImageData;\nlet floorImageData;\nlet celingImageData;\n\nfunction addPixelToImageData(sourceData, sourceIndex, dest, destIndex, alpha) {\n  dest.data[destIndex] = sourceData.data[sourceIndex];\n  dest.data[destIndex + 1] = sourceData.data[sourceIndex + 1];\n  dest.data[destIndex + 2] = sourceData.data[sourceIndex + 2];\n  dest.data[destIndex + 3] = alpha;\n}\n\nlet cameraX, rayDirX, rayDirY;\n\nlet image;\n\nlet w = 800;\nlet h = 400;\n\nconst update = () => {\n  // cast 'RAYS';\n  for (let x = 0; x < w; x++) {\n    cameraX = 2 * x / w - 1; \n\n    // get ray direction\n    rayDirX = dirX + planeX * cameraX;\n    rayDirY = dirY + planeY * cameraX;\n\n    // -------- DDA ---------\n\n    // get player coords;\n    const mapX = Math.floor(posX);\n    const mapY = Math.floor(posY);\n\n    // length of ray from one x or y-side to next x or y-side\n    // let deltaDistX = Math.abs(1 / rayDirX);\n    // let deltaDistY = Math.abs(1 / rayDirY);\n    let deltaDistX = Math.sqrt(1 + (rayDirY * rayDirY) / (rayDirX * rayDirX));\n    let deltaDistY = Math.sqrt(1 + (rayDirX * rayDirX) / (rayDirY * rayDirY));\n    let perpWallDist;\n\n    // direction of step\n    let stepX;\n    let stepY;\n\n    // length of ray from current position to next x or y-side\n    let sideDistX, sideDistY;\n\n    let hit = false;\n    let side; // 0 if x-axis side was hit 1 when y-axis side was hit\n\n    // calculate step & initial sideDist,\n\n    if (rayDirX < 0) {\n      stepX = -1;\n      sideDistX = (posX - mapX) * deltaDistX;\n    } else {\n      stepX = 1;\n      sideDistX = (mapX + 1 - posX) * deltaDistX;\n    }\n    if (rayDirY < 0) {\n      stepY = -1;\n      sideDistY = (posY - mapY) * deltaDistY;\n    } else {\n      stepY = 1;\n      sideDistY = (mapY + 1 - posY) * deltaDistY;\n    } \n\n    const hitWalls = [];\n    // Actual DDA\n    while (true) {\n      if (sideDistX < sideDistY) {\n        sideDistX += deltaDistX;\n        mapX += stepX;\n        mapX = Math.floor(mapX);\n        side = 0;\n      } else {\n        sideDistY += deltaDistY;\n        mapY += stepY;\n        mapY = Math.floor(mapY);\n        side = 1;\n      }\n\n      if (map[mapX][mapY] > 0) {\n        hitWalls.push({\n          mapX,\n          mapY,\n          side,\n          value: map[mapX][mapY],\n        });\n        if (map[mapX][mapY] !== 3) {\n          break;\n        }\n      }\n    }\n\n    // ------- DDA DONE -------\n\n    // Calculate distance projected on camera\n    hitWalls.reverse().forEach(({mapX, mapY, side, value}) => {\n      if (side === 0) {\n        perpWallDist = (mapX - posX + (1 - stepX) / 2) / rayDirX;\n      } else {\n        perpWallDist = (mapY - posY + (1 - stepY) / 2) / rayDirY;\n      }\n\n      // if (value === 3) {\n        // perpWallDist = perpWallDist * 4;\n      // }\n\n      // Calculate col height;\n      let lineHeight = Math.floor(Math.abs(h / perpWallDist));\n\n      // calculate lowest and highest pixel;\n      let drawStart = h / 2 + lineHeight / 2 ;\n      let drawEnd = drawStart - lineHeight;\n      // if (drawStart < 0) drawStart = 0;\n\n      if (value === 3) {\n        drawStart = h / 2 + lineHeight / 2;\n        drawEnd = drawStart - lineHeight / value;\n      }\n//\n      // if (value === 2) {\n        // drawStart = h / 2 + lineHeight / 2;\n        // drawEnd = drawStart - lineHeight * value * 1.2;\n      // }\n      // let drawEnd = drawStart - 5 * 10 + 20;\n      // if (value === 3) {\n      // }\n\n      let color;\n      switch(map[mapX][mapY]) {\n        case(1): {\n          color= 'red';\n          if (side === 1) {\n            color = 'salmon';\n          }\n          break;\n        }\n        case(2): {\n          color= 'green';\n          if (side === 1) {\n            color = 'springgreen';\n          }\n          break;\n        }\n        case(3): {\n          color= 'blue';\n          if (side === 1) {\n            color = 'skyblue';\n          }\n          break;\n        }\n        case(4): {\n          color= 'white';\n          if (side === 1) {\n            color = 'whitesmoke';\n          }\n          break;\n        }\n      }\n\n\n      let wallX\n      if (side === 0) {\n        wallX = posY + perpWallDist * rayDirY;\n      } else {\n        wallX = posX + perpWallDist * rayDirX;\n      }\n\n      wallX -= Math.floor(wallX);\n\n      let textureSize = 16;\n      let textureX = Math.floor((wallX - Math.floor(wallX)) * textureSize);\n//\n      ctx.fillStyle = color;\n      ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);\n\n      // if (value === 2) {\n        // ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight * 1.2 * value);\n      if (value === 3) {\n        ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight / value);\n      } else {\n        ctx.drawImage(image, textureX, 0, 1, textureSize, x, drawEnd, 1, lineHeight);\n      }\n\n      let floorXWall; \n      let floorYWall;\n\n      if(side === 0 && rayDirX > 0) {\n        floorXWall = mapX;\n        floorYWall = mapY + wallX;\n      } else if(side === 0 && rayDirX < 0) {\n        floorXWall = mapX + 1.0;\n        floorYWall = mapY + wallX;\n      } else if(side === 1 && rayDirY > 0) {\n        floorXWall = mapX + wallX;\n        floorYWall = mapY;\n      } else {\n        floorXWall = mapX + wallX;\n        floorYWall = mapY + 1.0;\n      }\n\n      textureSize = 16;\n\n      for (let y = Math.floor(drawStart); y < h; y++) {\n        let currentDist = h / (2 * y - h);\n        let weight = currentDist / perpWallDist;\n\n        let currentFloorX = (weight * floorXWall + (1 - weight) * posX);\n        let currentFloorY = (weight * floorYWall + (1 - weight) * posY);\n\n        let floorTexX = Math.floor(currentFloorX * textureSize) % textureSize;\n        let floorTexY = Math.floor(currentFloorY * textureSize) % textureSize;\n\n        const sourceIndex = ((textureSize * floorTexY) + floorTexX) * 4;\n\n        const alpha = mapValue(currentDist, 0, 8, 255, 0);\n\n        const destFloorIndex = (w * y + x) * 4;\n        const destCeilIndex = (w * (h - y) + x) * 4;\n\n        addPixelToImageData(floorImageData, sourceIndex, rayCastingImageData, destFloorIndex, alpha);\n        addPixelToImageData(celingImageData, sourceIndex, rayCastingImageData, destCeilIndex, alpha);\n\n        // ctx.fillStyle = `rgba(0, 0, 0, ${val2})`;\n        // ctx.fillRect(Math.floor(x), Math.floor(y), 1, 1);\n        // ctx.fillRect(Math.floor(x), h - Math.floor(y), 1, 1);\n      }\n\n      const val2 = mapValue(perpWallDist, 0, 10, 0, 1);\n      ctx.fillStyle = `rgba(0, 0, 0, ${val2})`;\n      ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);\n    });\n  }\n};\n\nconst loop = () => {\n  ctx.clearRect(0, 0, 800, 400);\n  floorCtx.clearRect(0, 0, 800, 400);\n  ctx.save();\n  rayCastingImageData = new ImageData(w, h);\n  update(); \n  ctx.restore();\n  floorCtx.putImageData(rayCastingImageData, 0, 0);\n  window.requestAnimationFrame(loop);\n};\n\nconst rotSpeed = 0.1;\n\nwindow.addEventListener('keydown', e => {\n  if (e.key === 'w') {\n    posY += dirY * 0.2;\n    posX += dirX * 0.2;\n  }\n  if (e.key === 's') {\n    posY -= dirY * 0.2;\n    posX -= dirX * 0.2;\n  }\n\n  if (e.key === 'd') {\n    const oldDirX = dirX;\n    dirX = dirX * Math.cos(-rotSpeed) - dirY * Math.sin(-rotSpeed);\n    dirY = oldDirX * Math.sin(-rotSpeed) + dirY * Math.cos(-rotSpeed);\n\n    const oldPlaneX = planeX;\n    planeX = planeX * Math.cos(-rotSpeed) - planeY * Math.sin(-rotSpeed);\n    planeY = oldPlaneX * Math.sin(-rotSpeed) + planeY * Math.cos(-rotSpeed);\n  }\n  \n  if (e.key === 'a') {\n    const oldDirX = dirX;\n    dirX = dirX * Math.cos(rotSpeed) - dirY * Math.sin(rotSpeed);\n    dirY = oldDirX * Math.sin(rotSpeed) + dirY * Math.cos(rotSpeed);\n\n    const oldPlaneX = planeX;\n    planeX = planeX * Math.cos(rotSpeed) - planeY * Math.sin(rotSpeed);\n    planeY = oldPlaneX * Math.sin(rotSpeed) + planeY * Math.cos(rotSpeed);\n\n  }\n\n  if (e.key === 'q') {\n    offset += 10;\n  } \n\n  if (e.key === 'z') {\n    offset -= 10;\n  }\n});\n\nconst loadAsset = (src) => {\n  return new Promise(resolve => {\n    const asset = new Image();\n    asset.src = src;\n    asset.onload = () => {\n      resolve(asset);\n    }\n  });\n};\n\nloadAsset('Wall.png').then((asset) => {\n  image = asset;\n  textureImageData = getImageData(image);\n  return loadAsset('Floor.png')\n}).then(asset => {\n  floorImageData = getImageData(asset)\n  return loadAsset('Celling.png')\n}).then(asset => {\n  celingImageData = getImageData(asset);\n  window.requestAnimationFrame(loop);\n});\n"]}